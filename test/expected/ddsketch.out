\set ECHO none
-- SRF function implementing a simple deterministict PRNG
CREATE OR REPLACE FUNCTION prng(nrows int, seed int = 23982, p1 bigint = 16807, p2 bigint = 0, n bigint = 2147483647) RETURNS SETOF double precision AS $$
DECLARE
    val INT := seed;
BEGIN
    FOR i IN 1..nrows LOOP
        val := (val * p1 + p2) % n;

        RETURN NEXT (val::double precision / n);
    END LOOP;

    RETURN;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION random_normal(nrows int, mean double precision = 0.5, stddev double precision = 0.1, minval double precision = 0.0, maxval double precision = 1.0, seed int = 23982, p1 bigint = 16807, p2 bigint = 0, n bigint = 2147483647) RETURNS SETOF double precision AS $$
DECLARE
    v BIGINT := seed;
    x DOUBLE PRECISION;
    y DOUBLE PRECISION;
    s DOUBLE PRECISION;
    r INT := nrows;
BEGIN

    WHILE true LOOP

        -- random x
        v := (v * p1 + p2) % n;
        x := 2 * v / n::double precision - 1.0;

        -- random y
        v := (v * p1 + p2) % n;
        y := 2 * v / n::double precision - 1.0;

        s := x^2 + y^2;

        IF s != 0.0 AND s < 1.0 THEN

            s = sqrt(-2 * ln(s) / s);

            x := mean + stddev * s * x;

            IF x >= minval AND x <= maxval THEN
                RETURN NEXT x;
                r := r - 1;
            END IF;

            EXIT WHEN r = 0;

            y := mean + stddev * s * y;

            IF y >= minval AND y <= maxval THEN
                RETURN NEXT y;
                r := r - 1;
            END IF;

            EXIT WHEN r = 0;

        END IF;

    END LOOP;

END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION relative_error(estimated_value double precision, actual_value double precision) RETURNS double precision AS $$
DECLARE
    divisor double precision;
BEGIN
    -- if both values are 0, then the relative error is 0
    if (abs(actual_value) = 0) and (abs(estimated_value) = 0) then
        return 0.0;
    end if;

    -- use actual value az divisor, but if it's 0 then use the estimate
    -- this allows us to calculate the error without division by zero
    -- (we already know both can't be zero)
    divisor := abs(actual_value);
    if divisor = 0 then
      divisor := abs(estimated_value);
    end if;

    return abs(estimated_value - actual_value) / divisor;
END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION check_relative_error(estimated_value double precision, actual_value double precision, allowed_error double precision) RETURNS bool AS $$
DECLARE
    err double precision;
BEGIN

    IF ((estimated_value < 0) AND (actual_value > 0)) OR ((estimated_value > 0) AND (actual_value < 0)) THEN
        RETURN NULL;
    END IF;

    err := relative_error(estimated_value, actual_value);

    RETURN (err < allowed_error);

END;
$$ LANGUAGE plpgsql;
CREATE OR REPLACE FUNCTION print_relative_error(estimated_value double precision, actual_value double precision, allowed_error double precision) RETURNS text AS $$
DECLARE
    err double precision;
BEGIN

    IF ((estimated_value < 0) AND (actual_value > 0)) OR ((estimated_value > 0) AND (actual_value < 0)) THEN
        RETURN format('estimate = %s, actual = %s', estimated_value, actual_value);
    END IF;

    err := relative_error(estimated_value, actual_value);

    IF err < allowed_error THEN
        RETURN NULL;
    END IF;

    RETURN format('estimate = %s, actual = %s, error = %s', estimated_value, actual_value, err);

END;
$$ LANGUAGE plpgsql;
-----------------------------------------------------------
-- parameter validation
-----------------------------------------------------------
-- invalid percentile value
SELECT ddsketch_percentile(i / 1.0, 0.01, 1024, ARRAY[0.1, -0.1]) FROM generate_series(1,10000) s(i);
ERROR:  invalid percentile value -0.100000, should be in [0.0, 1.0]
-- alpha too low
SELECT ddsketch_percentile(i / 1.0, 0.00009, 1024, 0.5) FROM generate_series(1,10000) s(i);
ERROR:  invalid alpha value 0.000090
-- alpha too high
SELECT ddsketch_percentile(i / 1.0, 0.11, 1024, 0.5) FROM generate_series(1,10000) s(i);
ERROR:  invalid alpha value 0.110000
-- fewer than minimum number of buckets
SELECT ddsketch_percentile(i / 1.0, 0.01, 15, 0.5) FROM generate_series(1,10000) s(i);
ERROR:  invalid number of buckets 15
-- more than maximum number of buckets
SELECT ddsketch_percentile(i / 1.0, 0.01, 32769, 0.5) FROM generate_series(1,10000) s(i);
ERROR:  invalid number of buckets 32769
-- too many buckets needed
SELECT ddsketch_percentile(i / 1.0, 0.01, 32, 0.5) FROM generate_series(1,10000) s(i);
ERROR:  bucket overflow (used 32, allocated 32, max 32)
-----------------------------------------------------------
-- nice data set with ordered (asc) / evenly-spaced data --
-----------------------------------------------------------
-- alpha = 0.05
WITH data AS (SELECT i AS x FROM generate_series(1,10000) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(1,10000) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(1,10000) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT i AS x FROM generate_series(1,10000) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 5000  AS x FROM generate_series(1,10000) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(1,10000) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.01
WITH data AS (SELECT i AS x FROM generate_series(1,10000) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(1,10000) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(1,10000) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT i AS x FROM generate_series(1,10000) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(1,10000) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(1,10000) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- 0.001 alpha
WITH data AS (SELECT i AS x FROM generate_series(1,10000) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 2048, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(1,10000) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 4096, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(1,10000) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 2048, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT i AS x FROM generate_series(1,10000) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 2048, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(1,10000) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 4096, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(1,10000) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 2048, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

------------------------------------------------------------
-- nice data set with ordered (desc) / evenly-spaced data --
------------------------------------------------------------
-- 0.05 alpha
WITH data AS (SELECT i AS x FROM generate_series(10000,1,-1) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(10000,1,-1) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(10000,1,-1) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT i AS x FROM generate_series(10000,1,-1) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(10000,1,-1) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(10000,1,-1) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.01
WITH data AS (SELECT i AS x FROM generate_series(10000,1,-1) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(10000,1,-1) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(10000,1,-1) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT i AS x FROM generate_series(10000,1,-1) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(10000,1,-1) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(10000,1,-1) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.001
WITH data AS (SELECT i AS x FROM generate_series(10000,1,-1) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 2048, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(10000,1,-1) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 4096, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(10000,1,-1) s(i))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 2048, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT i AS x FROM generate_series(10000,1,-1) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 2048, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(10000,1,-1) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 4096, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(10000,1,-1) s(i)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 2048, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

----------------------------------------------------
-- nice data set with random / evenly-spaced data --
----------------------------------------------------
-- alpha 0.05
WITH data AS (SELECT i AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo)
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 5000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo)
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 10000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo)
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT i AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 5000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 10000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.01
WITH data AS (SELECT i AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo)
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 5000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo)
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 10000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo)
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT i AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 5000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 10000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.001
WITH data AS (SELECT i AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo)
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 5000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo)
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 10000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo)
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT i AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 5000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT i - 10000 AS x FROM (SELECT generate_series(1,10000) AS i, prng(10000, 49979693) AS x ORDER BY x) foo),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

----------------------------------------------
-- nice data set with random data (uniform) --
----------------------------------------------
-- alpha 0.05
WITH data AS (SELECT 10000 * x AS x FROM prng(10000) s(x))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * x - 5000 AS x FROM prng(10000) s(x))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * x - 10000 AS x FROM prng(10000) s(x))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * x AS x FROM prng(10000) s(x)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * x - 5000 AS x FROM prng(10000) s(x)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * x - 10000 AS x FROM prng(10000) s(x)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.01
WITH data AS (SELECT 10000 * x AS x FROM prng(10000) s(x))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * x - 5000 AS x FROM prng(10000) s(x))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * x - 10000 AS x FROM prng(10000) s(x))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * x AS x FROM prng(10000) s(x)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * x - 5000 AS x FROM prng(10000) s(x)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * x - 10000 AS x FROM prng(10000) s(x)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.001
WITH data AS (SELECT 10000 * x AS x FROM prng(10000) s(x))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * x - 5000 AS x FROM prng(10000) s(x))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * x - 10000 AS x FROM prng(10000) s(x))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * x AS x FROM prng(10000) s(x)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * x - 5000 AS x FROM prng(10000) s(x)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * x - 10000 AS x FROM prng(10000) s(x)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

--------------------------------------------------
-- nice data set with random data (skewed sqrt) --
--------------------------------------------------
-- alpha 0.05
WITH data AS (SELECT 10000 * sqrt(z) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 10000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * sqrt(z) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 10000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.01
WITH data AS (SELECT 10000 * sqrt(z) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 10000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * sqrt(z) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 10000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- 0.001 alpha
WITH data AS (SELECT 10000 * sqrt(z) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * sqrt(z) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(z) - 10000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-------------------------------------------------------
-- nice data set with random data (skewed sqrt+sqrt) --
-------------------------------------------------------
-- alpha 0.05
WITH data AS (SELECT 10000 * sqrt(sqrt(z)) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 10000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * sqrt(sqrt(z)) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 10000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.01
WITH data AS (SELECT 10000 * sqrt(sqrt(z)) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 10000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * sqrt(sqrt(z)) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 10000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.001
WITH data AS (SELECT 10000 * sqrt(sqrt(z)) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 10000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * sqrt(sqrt(z)) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * sqrt(sqrt(z)) - 10000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-------------------------------------------------
-- nice data set with random data (skewed pow) --
-------------------------------------------------
-- alpha 0.05
WITH data AS (SELECT 10000 * pow(z, 2) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * pow(z, 2) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * pow(z, 2) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * pow(z, 2) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.01
WITH data AS (SELECT 10000 * pow(z, 2) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * pow(z, 2) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * pow(z, 2) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * pow(z, 2) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- 0.001 alpha
WITH data AS (SELECT 10000 * pow(z, 2) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * pow(z, 2) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * pow(z, 2) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * pow(z, 2) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-----------------------------------------------------
-- nice data set with random data (skewed pow+pow) --
-----------------------------------------------------
-- 0.05 alpha
WITH data AS (SELECT 10000 * pow(z, 4) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * pow(z, 4) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * pow(z, 4) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * pow(z, 4) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- alpha 0.01
WITH data AS (SELECT 10000 * pow(z, 4) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 2048, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * pow(z, 4) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * pow(z, 4) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 2048, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * pow(z, 4) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- 0.001 alpha
WITH data AS (SELECT 10000 * pow(z, 4) AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 16384, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT 10000 * pow(z, 4) - 5000 AS x FROM prng(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * pow(z, 4) AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 16384, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

WITH data AS (SELECT 10000 * pow(z, 4) - 5000 AS x FROM prng(10000) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 8192, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

----------------------------------------------------------
-- nice data set with random data (normal distribution) --
----------------------------------------------------------
-- 0.05 alpha
WITH data AS (SELECT 10000 * pow(z, 3) AS x FROM random_normal(10000, mean := 0.0, stddev := 0.1, minval := -1.0, maxval := 1.0) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * pow(z, 3) AS x FROM random_normal(10000, mean := 0.0, stddev := 0.1, minval := -1.0, maxval := 1.0) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.05, 1024, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- 0.01 alpha
WITH data AS (SELECT 10000 * pow(z, 3) AS x FROM random_normal(10000, mean := 0.0, stddev := 0.1, minval := -1.0, maxval := 1.0) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.01, 4096, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * pow(z, 3) AS x FROM random_normal(10000, mean := 0.0, stddev := 0.1, minval := -1.0, maxval := 1.0) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.01, 4096, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- 0.001 alpha
WITH data AS (SELECT 10000 * pow(z, 3) AS x FROM random_normal(10000, mean := 0.0, stddev := 0.1, minval := -1.0, maxval := 1.0) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.001, 32768, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- make sure the resulting percentiles are in the right order
WITH data AS (SELECT 10000 * pow(z, 3) AS x FROM random_normal(10000, mean := 0.0, stddev := 0.1, minval := -1.0, maxval := 1.0) s(z)),
     perc AS (SELECT array_agg((i/100.0)::double precision) AS p FROM generate_series(1,99) s(i))
SELECT * FROM (
    SELECT
        p,
        a,
        LAG(a) OVER (ORDER BY p) AS b
    FROM (
        SELECT
            unnest((SELECT p FROM perc)) AS p,
            unnest(ddsketch_percentile(x, 0.001, 32768, (SELECT p FROM perc))) AS a
        FROM data
    ) foo ) bar WHERE a < b;
 p | a | b 
---+---+---
(0 rows)

-- some basic tests to verify transforming from and to text work
-- 0.05 alpha
WITH data AS (SELECT i AS x FROM generate_series(1,10000) s(i)),
     intermediate AS (SELECT ddsketch(x, 0.05, 1024)::text AS intermediate_x FROM data),
     ddsketch_parsed AS (SELECT ddsketch_percentile(intermediate_x::ddsketch, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS a FROM intermediate),
     pg_percentile AS (SELECT percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x) AS b FROM data)
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(a) AS a,
        unnest(b) AS b
    FROM ddsketch_parsed,
         pg_percentile
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 5000 AS x FROM generate_series(1,10000) s(i)),
     intermediate AS (SELECT ddsketch(x, 0.05, 1024)::text AS intermediate_x FROM data),
     ddsketch_parsed AS (SELECT ddsketch_percentile(intermediate_x::ddsketch, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS a FROM intermediate),
     pg_percentile AS (SELECT percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x) AS b FROM data)
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(a) AS a,
        unnest(b) AS b
    FROM ddsketch_parsed,
         pg_percentile
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

WITH data AS (SELECT i - 10000 AS x FROM generate_series(1,10000) s(i)),
     intermediate AS (SELECT ddsketch(x, 0.05, 1024)::text AS intermediate_x FROM data),
     ddsketch_parsed AS (SELECT ddsketch_percentile(intermediate_x::ddsketch, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS a FROM intermediate),
     pg_percentile AS (SELECT percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x) AS b FROM data)
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(a) AS a,
        unnest(b) AS b
    FROM ddsketch_parsed,
         pg_percentile
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- verify we can store ddsketch in a summary table
CREATE TABLE intermediate_ddsketch (grouping int, summary ddsketch);
WITH data AS (SELECT row_number() OVER () AS i, 1.0 + pow(z, 4) AS x FROM random_normal(10000) s(z))
INSERT INTO intermediate_ddsketch
SELECT
    i % 10 AS grouping,
    ddsketch(x, 0.05, 1024) AS summary
FROM data
GROUP BY i % 10;
WITH data AS (SELECT 1.0 + pow(z, 4) AS x FROM random_normal(10000) s(z)),
     intermediate AS (SELECT ddsketch_percentile(summary, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS a FROM intermediate_ddsketch),
     pg_percentile AS (SELECT percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY x) AS b FROM data)
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(a) AS a,
        unnest(b) AS b
    FROM intermediate,
         pg_percentile
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- verify we can store ddsketch in a summary table (individual percentiles)
TRUNCATE intermediate_ddsketch;
WITH data AS (SELECT row_number() OVER () AS i, 100 * pow(z, 4) AS x FROM random_normal(10000) s(z))
INSERT INTO intermediate_ddsketch
SELECT
    i % 10 AS grouping,
    ddsketch(x, 0.05, 1024) AS summary
FROM data
GROUP BY i % 10;
WITH data AS (SELECT 100 * pow(z, 4) AS x FROM random_normal(10000) s(z))
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        foo.p AS p,
        (SELECT ddsketch_percentile(summary, foo.p) FROM intermediate_ddsketch) AS a,
        (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY x) AS b FROM data) AS b
    FROM
         (SELECT unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) p) foo
) bar;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- verify 'extreme' percentiles for the dataset would not read out of bounds buckets
WITH data AS (SELECT x FROM generate_series(1,10) AS x)
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.99]) AS p,
        unnest(ddsketch_percentile(x, 0.05, 1024, ARRAY[0.01, 0.99])) AS a,
        unnest(percentile_disc(ARRAY[0.01, 0.99]) WITHIN GROUP (ORDER BY x)) AS b
    FROM data
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.99 | t           | 
(2 rows)

-- check that the computed percentiles are perfectly correlated (don't decrease for higher p values)
WITH
-- percentiles to compute
perc AS (SELECT array_agg((i / 100.0)::double precision) AS percentiles FROM generate_series(1,99) s(i)),
-- input data (just 15 points)
input_data AS (select i::double precision AS val FROM generate_series(1,15) s(i))
SELECT * FROM (
    SELECT p, v AS v1, lag(v, 1) OVER (ORDER BY p) v2 FROM (
        SELECT
            unnest(perc.percentiles) p,
            unnest(ddsketch_percentile(input_data.val, 0.05, 1024, perc.percentiles)) v
        FROM perc, input_data
        GROUP BY perc.percentiles
    ) foo
) bar where v2 > v1;
 p | v1 | v2 
---+----+----
(0 rows)

-- <value,count> API
select ddsketch_percentile(value, count, 0.05, 1024, ARRAY[0.9, 0.95, 0.99])
from (values
  (47325940488,1),
  (15457695432,2),
  (6889790700,3),
  (4188763788,4),
  (2882932224,5),
  (2114815860,6),
  (1615194324,7),
  (2342114568,9),
  (1626471924,11),
  (1660755408,14),
  (1143728292,17),
  (1082582424,21),
  (911488284,26),
  (728863908,32),
  (654898692,40),
  (530198076,50),
  (417883440,62),
  (341452344,77),
  (274579584,95),
  (231921120,118),
  (184091820,146),
  (152469828,181),
  (125634972,224),
  (107059704,278),
  (88746120,345),
  (73135668,428),
  (61035756,531),
  (50683320,658),
  (42331824,816),
  (35234400,1012),
  (29341356,1255),
  (24290928,1556),
  (20284668,1929),
  (17215908,2391),
  (14737488,2964),
  (12692772,3674),
  (11220732,4555),
  (9787584,5647),
  (8148420,7000),
  (6918612,8678),
  (6015000,10758),
  (5480316,13336),
  (5443356,16532),
  (4535616,20494),
  (3962316,25406),
  (3914484,31495),
  (3828108,39043),
  (3583536,48400),
  (4104120,60000),
  (166024740,2147483647)) foo (count, value);
                    ddsketch_percentile                     
------------------------------------------------------------
 {10.493014090054524,25.828042957905367,233.52681881364438}
(1 row)

----------------------------------------------
-- nice data set with random data (uniform) --
----------------------------------------------
-- 0.05 alpha
WITH
 data AS (SELECT prng(10000) x, prng(10000, 29823218) cnt),
 data_expanded AS (SELECT x FROM (SELECT x, generate_series(1, (10 + 100 * cnt)::int) FROM data) foo ORDER BY random())
SELECT
    p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(a) AS a,
        unnest(b) AS b
    FROM
       (SELECT percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY 1.0 + x) a FROM data_expanded) foo,
       (SELECT ddsketch_percentile(1.0 + x, (10 + 100 * cnt)::int, 0.05, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) b FROM data) bar
) baz;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- 0.01 alpha
WITH
 data AS (SELECT prng(10000) x, prng(10000, 29823218) cnt),
 data_expanded AS (SELECT x FROM (SELECT x, generate_series(1, (10 + 100 * cnt)::int) FROM data) foo ORDER BY random())
SELECT
    p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(a) AS a,
        unnest(b) AS b
    FROM
       (SELECT percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY 1.0 + x) a FROM data_expanded) foo,
       (SELECT ddsketch_percentile(1.0 + x, (10 + 100 * cnt)::int, 0.01, 1024, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) b FROM data) bar
) baz;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- 0.001 alpha
WITH
 data AS (SELECT prng(10000) x, prng(10000, 29823218) cnt),
 data_expanded AS (SELECT x FROM (SELECT x, generate_series(1, (10 + 100 * cnt)::int) FROM data) foo ORDER BY random())
SELECT
    p,
    check_relative_error(a, b, 0.001) AS check_error,
    print_relative_error(a, b, 0.001) AS error_info
FROM (
    SELECT
        unnest(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) AS p,
        unnest(a) AS a,
        unnest(b) AS b
    FROM
       (SELECT percentile_disc(ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) WITHIN GROUP (ORDER BY 1.0 + x) a FROM data_expanded) foo,
       (SELECT ddsketch_percentile(1.0 + x, (10 + 100 * cnt)::int, 0.001, 8192, ARRAY[0.01, 0.05, 0.1, 0.9, 0.95, 0.99]) b FROM data) bar
) baz;
  p   | check_error | error_info 
------+-------------+------------
 0.01 | t           | 
 0.05 | t           | 
  0.1 | t           | 
  0.9 | t           | 
 0.95 | t           | 
 0.99 | t           | 
(6 rows)

-- test incremental API (adding values one by one)
CREATE TABLE t (d ddsketch);
INSERT INTO t VALUES (NULL);
-- check this produces the same result building the ddsketch at once
DO LANGUAGE plpgsql $$
DECLARE
  r RECORD;
BEGIN
    FOR r IN (SELECT i FROM generate_series(1,1000) s(i) ORDER BY md5(i::text)) LOOP
        UPDATE t SET d = ddsketch_add(d, r.i, 0.05, 1024);
    END LOOP;
END$$;
-- compare the results
WITH x AS (SELECT i FROM generate_series(1,1000) s(i) ORDER BY md5(i::text))
SELECT (SELECT ddsketch(d)::text FROM t) = (SELECT ddsketch(x.i, 0.05, 1024)::text FROM x) AS match;
 match 
-------
 t
(1 row)

-- now do the same thing, but add values with a count
TRUNCATE t;
INSERT INTO t VALUES (NULL);
-- check this produces the same result building the ddsketch at once
DO LANGUAGE plpgsql $$
DECLARE
  r RECORD;
BEGIN
    FOR r IN (SELECT i AS v, (1 + pow(mod(i,13), 2)::int) AS c FROM generate_series(1,1000) s(i) ORDER BY md5(i::text)) LOOP
        UPDATE t SET d = ddsketch_add(d, r.v, r.c, 0.05, 1024);
    END LOOP;
END$$;
-- compare the results
WITH x AS (SELECT i::double precision AS v, (1 + pow(mod(i,13), 2)::int) AS c FROM generate_series(1,1000) s(i) ORDER BY md5(i::text))
SELECT (SELECT ddsketch(d)::text FROM t) = (SELECT ddsketch(x.v, x.c, 0.05, 1024)::text FROM x) AS match;
 match 
-------
 t
(1 row)

-- now try the same thing with bulk incremental update (using arrays)
TRUNCATE t;
INSERT INTO t VALUES (NULL);
DO LANGUAGE plpgsql $$
DECLARE
  r RECORD;
BEGIN
    FOR r IN (SELECT a, array_agg(i::double precision) AS v FROM (SELECT mod(i,5) AS a, i FROM generate_series(1,1000) s(i) ORDER BY mod(i,5), md5(i::text)) foo GROUP BY a ORDER BY a) LOOP
        UPDATE t SET d = ddsketch_add(d, r.v, 0.05, 1024);
    END LOOP;
END$$;
-- compare the results
WITH x AS (SELECT mod(i,5) AS a, i::double precision AS d FROM generate_series(1,1000) s(i) ORDER BY mod(i,5), i)
SELECT (SELECT ddsketch(d)::text FROM t) = (SELECT ddsketch(x.d, 0.05, 1024)::text FROM x);
 ?column? 
----------
 t
(1 row)

-- now try the same thing with bulk incremental update (using ddsketches)
TRUNCATE t;
INSERT INTO t VALUES (NULL);
DO LANGUAGE plpgsql $$
DECLARE
  r RECORD;
BEGIN
    FOR r IN (SELECT a, ddsketch(i, 0.05, 1024) AS d FROM (SELECT mod(i,5) AS a, i FROM generate_series(1,1000) s(i) ORDER BY mod(i,5), md5(i::text)) foo GROUP BY a ORDER BY a) LOOP
        UPDATE t SET d = ddsketch_union(d, r.d);
    END LOOP;
END$$;
-- compare the results
WITH x AS (SELECT a, ddsketch(i, 0.05, 1024) AS d FROM (SELECT mod(i,5) AS a, i FROM generate_series(1,1000) s(i) ORDER BY mod(i,5), md5(i::text)) foo GROUP BY a ORDER BY a)
SELECT (SELECT ddsketch(d)::text FROM t) = (SELECT ddsketch(x.d)::text FROM x);
 ?column? 
----------
 t
(1 row)

-- percentile_of with an array of values
WITH data AS (SELECT i / 50.0 AS v FROM generate_series(-5000, 5000) s(i))
SELECT
    f,
    abs(a - b) < 0.05
FROM (
    SELECT
      unnest(ARRAY[-100.0, -75.0, -50.0, -25.0, 0.0, 25.0, 50.0, 75.0, 100.0]) f,
      unnest((SELECT ddsketch_percentile_of(data.v, 0.05, 1024, ARRAY[-100.0, -75.0, -50.0, -25.0, 0.0, 25.0, 50.0, 75.0, 100.0]) FROM data)) a,
      unnest((SELECT array_agg((SELECT percent_rank(f) WITHIN GROUP (ORDER BY v) FROM data)) foo FROM unnest(ARRAY[-100.0, -75.0, -50.0, -25.0, 0.0, 25.0, 50.0, 75.0, 100.0]) f)) AS b
) foo;
   f    | ?column? 
--------+----------
 -100.0 | t
  -75.0 | t
  -50.0 | t
  -25.0 | t
    0.0 | t
   25.0 | t
   50.0 | t
   75.0 | t
  100.0 | t
(9 rows)

-- percentile_of and individual values
WITH
    data AS (SELECT i / 50.0 AS v FROM generate_series(-5000, 5000) s(i))
SELECT
    f,
    abs(a - b) < 0.05
FROM (
    SELECT
        f,
        (SELECT ddsketch_percentile_of(data.v, 0.05, 1024, f) FROM data) a,
        (SELECT percent_rank(f) WITHIN GROUP (ORDER BY v) FROM data) AS b
    FROM unnest(ARRAY[-100.0, -75.0, -50.0, -25.0, 0, 25.0, 50.0, 75.0, 100.0]) AS f
) foo;
   f    | ?column? 
--------+----------
 -100.0 | t
  -75.0 | t
  -50.0 | t
  -25.0 | t
      0 | t
   25.0 | t
   50.0 | t
   75.0 | t
  100.0 | t
(9 rows)

-- <value,count> API with percentile_of and individual values
WITH
    data AS (SELECT i / 50.0 AS v, 1 + abs(mod(i,13)) AS c FROM generate_series(-5000, 5000) s(i)),
    data_expanded AS (SELECT foo.v FROM (SELECT data.c, data.v FROM data) foo, LATERAL generate_series(1, c))
SELECT
    f,
    abs(a - b) < 0.05
FROM (
    SELECT
      f,
      (SELECT ddsketch_percentile_of(data.v, data.c, 0.05, 1024, f) FROM data) a,
      (SELECT percent_rank(f) WITHIN GROUP (ORDER BY v) FROM data_expanded) AS b
    FROM unnest(ARRAY[-100.0, -75.0, -50.0, -25.0, 0, 25.0, 50.0, 75.0, 100.0]) AS f
) foo;
   f    | ?column? 
--------+----------
 -100.0 | t
  -75.0 | t
  -50.0 | t
  -25.0 | t
      0 | t
   25.0 | t
   50.0 | t
   75.0 | t
  100.0 | t
(9 rows)

-- <value,count> API with percentile_of and an array
WITH
    data AS (SELECT i / 50.0 AS v, 1 + abs(mod(i,13)) AS c FROM generate_series(-5000, 5000) s(i)),
    data_expanded AS (SELECT foo.v FROM (SELECT data.c, data.v FROM data) foo, LATERAL generate_series(1, c))
SELECT
    f,
    abs(a - b) < 0.05
FROM (
    SELECT
      unnest(ARRAY[-100.0, -75.0, -50.0, -25.0, 0.0, 25.0, 50.0, 75.0, 100.0]) f,
      unnest((SELECT ddsketch_percentile_of(data.v, data.c, 0.05, 1024, ARRAY[-100.0, -75.0, -50.0, -25.0, 0.0, 25.0, 50.0, 75.0, 100.0]) FROM data)) a,
      unnest((SELECT array_agg((SELECT percent_rank(f) WITHIN GROUP (ORDER BY v) FROM data_expanded)) foo FROM unnest(ARRAY[-100.0, -75.0, -50.0, -25.0, 0.0, 25.0, 50.0, 75.0, 100.0]) f)) AS b
) foo;
   f    | ?column? 
--------+----------
 -100.0 | t
  -75.0 | t
  -50.0 | t
  -25.0 | t
    0.0 | t
   25.0 | t
   50.0 | t
   75.0 | t
  100.0 | t
(9 rows)

-- hypothetical-set aggregates
--
-- there's no guarantee for relative-errors of hypothetical-aggregates,
-- but for uniform distribution it's fairly close to the relative error
-- the ddsketch was defined with
WITH
  data AS (SELECT i / 10.0 AS v FROM generate_series(1,10000) s(i)), 
  sketch AS (SELECT ddsketch(data.v, 0.05, 1024) AS s FROM data)
SELECT
  v,
  check_relative_error(a, b, 0.06) AS check_error,
  print_relative_error(a, b, 0.06) AS error_info
FROM (
  SELECT
    foo.v,
    (SELECT ddsketch_percentile_of(sketch.s, foo.v) FROM sketch) a,
    (SELECT percent_rank(foo.v) WITHIN GROUP (ORDER BY v) FROM data) b
  FROM
    (SELECT i AS v FROM generate_series(0,1000,25) s(i)) foo
) bar;
  v   | check_error | error_info 
------+-------------+------------
    0 | t           | 
   25 | t           | 
   50 | t           | 
   75 | t           | 
  100 | t           | 
  125 | t           | 
  150 | t           | 
  175 | t           | 
  200 | t           | 
  225 | t           | 
  250 | t           | 
  275 | t           | 
  300 | t           | 
  325 | t           | 
  350 | t           | 
  375 | t           | 
  400 | t           | 
  425 | t           | 
  450 | t           | 
  475 | t           | 
  500 | t           | 
  525 | t           | 
  550 | t           | 
  575 | t           | 
  600 | t           | 
  625 | t           | 
  650 | t           | 
  675 | t           | 
  700 | t           | 
  725 | t           | 
  750 | t           | 
  775 | t           | 
  800 | t           | 
  825 | t           | 
  850 | t           | 
  875 | t           | 
  900 | t           | 
  925 | t           | 
  950 | t           | 
  975 | t           | 
 1000 | t           | 
(41 rows)

WITH
  data AS (SELECT mod(i,10) as x, i / 10.0 AS v FROM generate_series(1,10000) s(i)), 
  sketches AS (SELECT ddsketch(data.v, 0.05, 1024) AS s FROM data GROUP BY data.x)
SELECT
  v,
  check_relative_error(a, b, 0.06) AS check_error,
  print_relative_error(a, b, 0.06) AS error_info
FROM (
  SELECT
    foo.v,
    (SELECT ddsketch_percentile_of(sketches.s, foo.v) FROM sketches) a,
    (SELECT percent_rank(foo.v) WITHIN GROUP (ORDER BY v) FROM data) b
  FROM
    (SELECT i AS v FROM generate_series(0,1000,25) s(i)) foo
) bar;
  v   | check_error | error_info 
------+-------------+------------
    0 | t           | 
   25 | t           | 
   50 | t           | 
   75 | t           | 
  100 | t           | 
  125 | t           | 
  150 | t           | 
  175 | t           | 
  200 | t           | 
  225 | t           | 
  250 | t           | 
  275 | t           | 
  300 | t           | 
  325 | t           | 
  350 | t           | 
  375 | t           | 
  400 | t           | 
  425 | t           | 
  450 | t           | 
  475 | t           | 
  500 | t           | 
  525 | t           | 
  550 | t           | 
  575 | t           | 
  600 | t           | 
  625 | t           | 
  650 | t           | 
  675 | t           | 
  700 | t           | 
  725 | t           | 
  750 | t           | 
  775 | t           | 
  800 | t           | 
  825 | t           | 
  850 | t           | 
  875 | t           | 
  900 | t           | 
  925 | t           | 
  950 | t           | 
  975 | t           | 
 1000 | t           | 
(41 rows)

WITH
  data AS (SELECT i / 10.0 AS v FROM generate_series(1,10000) s(i)), 
  sketch AS (SELECT ddsketch(data.v, 0.05, 1024) AS s FROM data),
  vals AS (SELECT array_agg(i) AS v FROM generate_series(0,1000,25) s(i)),
  sketch_values AS (SELECT ddsketch_percentile_of(sketch.s, vals.v) AS v FROM sketch, vals),
  percent_ranks AS (SELECT array_agg((SELECT percent_rank(i) WITHIN GROUP (ORDER BY v) FROM data)) AS v FROM generate_series(0,1000,25) s(i))
SELECT
  v,
  check_relative_error(a, b, 0.06) AS check_error,
  print_relative_error(a, b, 0.06) AS error_info
FROM (
  SELECT
    unnest(vals.v) as v,
    unnest(sketch_values.v) as a,
    unnest(percent_ranks.v) as b
  FROM
    vals, sketch_values, percent_ranks
) bar;
  v   | check_error | error_info 
------+-------------+------------
    0 | t           | 
   25 | t           | 
   50 | t           | 
   75 | t           | 
  100 | t           | 
  125 | t           | 
  150 | t           | 
  175 | t           | 
  200 | t           | 
  225 | t           | 
  250 | t           | 
  275 | t           | 
  300 | t           | 
  325 | t           | 
  350 | t           | 
  375 | t           | 
  400 | t           | 
  425 | t           | 
  450 | t           | 
  475 | t           | 
  500 | t           | 
  525 | t           | 
  550 | t           | 
  575 | t           | 
  600 | t           | 
  625 | t           | 
  650 | t           | 
  675 | t           | 
  700 | t           | 
  725 | t           | 
  750 | t           | 
  775 | t           | 
  800 | t           | 
  825 | t           | 
  850 | t           | 
  875 | t           | 
  900 | t           | 
  925 | t           | 
  950 | t           | 
  975 | t           | 
 1000 | t           | 
(41 rows)

WITH
  data AS (SELECT mod(i,10) AS x, i / 10.0 AS v FROM generate_series(1,10000) s(i)), 
  sketches AS (SELECT ddsketch(data.v, 0.05, 1024) AS s FROM data GROUP BY x),
  vals AS (SELECT array_agg(i) AS v FROM generate_series(0,1000,25) s(i)),
  sketch_values AS (SELECT ddsketch_percentile_of(sketches.s, vals.v) AS v FROM sketches, vals),
  percent_ranks AS (SELECT array_agg((SELECT percent_rank(i) WITHIN GROUP (ORDER BY v) FROM data)) AS v FROM generate_series(0,1000,25) s(i))
SELECT
  v,
  check_relative_error(a, b, 0.06) AS check_error,
  print_relative_error(a, b, 0.06) AS error_info
FROM (
  SELECT
    unnest(vals.v) as v,
    unnest(sketch_values.v) as a,
    unnest(percent_ranks.v) as b
  FROM
    vals, sketch_values, percent_ranks
) bar;
  v   | check_error | error_info 
------+-------------+------------
    0 | t           | 
   25 | t           | 
   50 | t           | 
   75 | t           | 
  100 | t           | 
  125 | t           | 
  150 | t           | 
  175 | t           | 
  200 | t           | 
  225 | t           | 
  250 | t           | 
  275 | t           | 
  300 | t           | 
  325 | t           | 
  350 | t           | 
  375 | t           | 
  400 | t           | 
  425 | t           | 
  450 | t           | 
  475 | t           | 
  500 | t           | 
  525 | t           | 
  550 | t           | 
  575 | t           | 
  600 | t           | 
  625 | t           | 
  650 | t           | 
  675 | t           | 
  700 | t           | 
  725 | t           | 
  750 | t           | 
  775 | t           | 
  800 | t           | 
  825 | t           | 
  850 | t           | 
  875 | t           | 
  900 | t           | 
  925 | t           | 
  950 | t           | 
  975 | t           | 
 1000 | t           | 
(41 rows)

-- now the same thing, but pass the values as a single array
WITH
  data AS (SELECT i / 10.0 AS v FROM generate_series(1,10000) s(i)), 
  vals AS (SELECT array_agg(i) AS v FROM generate_series(0,1000,25) s(i)),
  sketch_values AS (SELECT ddsketch_percentile_of(data.v, 0.05, 1024, vals.v) AS v FROM data, vals),
  percent_ranks AS (SELECT array_agg((SELECT percent_rank(i) WITHIN GROUP (ORDER BY v) FROM data)) AS v FROM generate_series(0,1000,25) s(i))
SELECT
  v,
  check_relative_error(a, b, 0.06) AS check_error,
  print_relative_error(a, b, 0.06) AS error_info
FROM (
  SELECT
    unnest(vals.v) as v,
    unnest(sketch_values.v) as a,
    unnest(percent_ranks.v) as b
  FROM
    vals, sketch_values, percent_ranks
) bar;
  v   | check_error | error_info 
------+-------------+------------
    0 | t           | 
   25 | t           | 
   50 | t           | 
   75 | t           | 
  100 | t           | 
  125 | t           | 
  150 | t           | 
  175 | t           | 
  200 | t           | 
  225 | t           | 
  250 | t           | 
  275 | t           | 
  300 | t           | 
  325 | t           | 
  350 | t           | 
  375 | t           | 
  400 | t           | 
  425 | t           | 
  450 | t           | 
  475 | t           | 
  500 | t           | 
  525 | t           | 
  550 | t           | 
  575 | t           | 
  600 | t           | 
  625 | t           | 
  650 | t           | 
  675 | t           | 
  700 | t           | 
  725 | t           | 
  750 | t           | 
  775 | t           | 
  800 | t           | 
  825 | t           | 
  850 | t           | 
  875 | t           | 
  900 | t           | 
  925 | t           | 
  950 | t           | 
  975 | t           | 
 1000 | t           | 
(41 rows)

WITH
  data AS (SELECT i / 10.0 AS v FROM generate_series(1,10000) s(i)), 
  vals AS (SELECT array_agg(i) AS v FROM generate_series(0,1000,25) s(i)),
  sketch_values AS (SELECT ddsketch_percentile_of(data.v, 0.05, 1024, vals.v) AS v FROM data, vals),
  percent_ranks AS (SELECT array_agg((SELECT percent_rank(i) WITHIN GROUP (ORDER BY v) FROM data)) AS v FROM generate_series(0,1000,25) s(i))
SELECT
  v,
  check_relative_error(a, b, 0.06) AS check_error,
  print_relative_error(a, b, 0.06) AS error_info
FROM (
  SELECT
    unnest(vals.v) as v,
    unnest(sketch_values.v) as a,
    unnest(percent_ranks.v) as b
  FROM
    vals, sketch_values, percent_ranks
) bar;
  v   | check_error | error_info 
------+-------------+------------
    0 | t           | 
   25 | t           | 
   50 | t           | 
   75 | t           | 
  100 | t           | 
  125 | t           | 
  150 | t           | 
  175 | t           | 
  200 | t           | 
  225 | t           | 
  250 | t           | 
  275 | t           | 
  300 | t           | 
  325 | t           | 
  350 | t           | 
  375 | t           | 
  400 | t           | 
  425 | t           | 
  450 | t           | 
  475 | t           | 
  500 | t           | 
  525 | t           | 
  550 | t           | 
  575 | t           | 
  600 | t           | 
  625 | t           | 
  650 | t           | 
  675 | t           | 
  700 | t           | 
  725 | t           | 
  750 | t           | 
  775 | t           | 
  800 | t           | 
  825 | t           | 
  850 | t           | 
  875 | t           | 
  900 | t           | 
  925 | t           | 
  950 | t           | 
  975 | t           | 
 1000 | t           | 
(41 rows)

CREATE TABLE src_data (v double precision);
INSERT INTO src_data SELECT z FROM random_normal(1000000, mean := 0.0, stddev := 0.1, minval := -1.0, maxval := 1.0) s(z);
ANALYZE src_data;
-- with parallelism
EXPLAIN (COSTS OFF) SELECT ddsketch(v, 0.05, 1024) FROM src_data;
                   QUERY PLAN                    
-------------------------------------------------
 Finalize Aggregate
   ->  Gather
         Workers Planned: 2
         ->  Partial Aggregate
               ->  Parallel Seq Scan on src_data
(5 rows)

SELECT ddsketch(v, 0.05, 1024) FROM src_data;
ddsketch

 flags 0 count 1000000 alpha 0.050000 zero_count 0 maxbuckets 1024 buckets 249 125 (-7, 4) (-8, 32) (-9, 103) (-10, 327) (-11, 858) (-12, 1895) (-13, 3717) (-14, 6001) (-15, 8980) (-16, 12259) (-17, 15536) (-18, 18296) (-19, 20888) (-20, 22578) (-21, 23517) (-22, 24164) (-23, 24090) (-24, 23714) (-25, 23172) (-26, 21885) (-27, 20676) (-28, 19489) (-29, 17961) (-30, 16851) (-31, 15550) (-32, 14398) (-33, 13281) (-34, 11984) (-35, 10907) (-36, 10090) (-37, 8955) (-38, 8235) (-39, 7472) (-40, 6939) (-41, 6219) (-42, 5639) (-43, 5174) (-44, 4553) (-45, 4287) (-46, 3727) (-47, 3435) (-48, 3141) (-49, 2831) (-50, 2455) (-51, 2224) (-52, 2085) (-53, 1846) (-54, 1691) (-55, 1573) (-56, 1376) (-57, 1257) (-58, 1136) (-59, 1025) (-60, 876) (-61, 875) (-62, 789) (-63, 672) (-64, 620) (-65, 577) (-66, 530) (-67, 475) (-68, 448) (-69, 395) (-70, 360) (-71, 312) (-72, 274) (-73, 251) (-74, 228) (-75, 197) (-76, 182) (-77, 165) (-78, 167) (-79, 152) (-80, 104) (-81, 133) (-82, 99) (-83, 92) (-84, 79) (-85, 83) (-86, 61) (-87, 53) (-88, 70) (-89, 44) (-90, 56) (-91, 41) (-92, 36) (-93, 39) (-94, 25) (-95, 23) (-96, 18) (-97, 18) (-98, 21) (-99, 21) (-100, 20) (-101, 14) (-102, 10) (-103, 17) (-104, 14) (-105, 8) (-106, 8) (-107, 10) (-108, 10) (-109, 6) (-110, 6) (-111, 10) (-112, 2) (-113, 5) (-114, 3) (-115, 5) (-116, 5) (-117, 9) (-118, 1) (-119, 2) (-120, 2) (-121, 4) (-122, 2) (-123, 2) (-124, 1) (-125, 1) (-126, 1) (-129, 1) (-136, 1) (-139, 1) (-144, 1) (-145, 1) (-147, 1) (-140, 1) (-132, 1) (-131, 1) (-129, 1) (-128, 2) (-126, 1) (-124, 2) (-123, 3) (-122, 5) (-120, 4) (-119, 2) (-118, 6) (-117, 5) (-116, 7) (-115, 8) (-114, 2) (-113, 5) (-112, 4) (-111, 2) (-110, 7) (-109, 6) (-108, 8) (-107, 7) (-106, 7) (-105, 8) (-104, 20) (-103, 6) (-102, 10) (-101, 15) (-100, 14) (-99, 20) (-98, 16) (-97, 18) (-96, 26) (-95, 26) (-94, 28) (-93, 34) (-92, 39) (-91, 31) (-90, 37) (-89, 49) (-88, 62) (-87, 66) (-86, 86) (-85, 82) (-84, 92) (-83, 83) (-82, 105) (-81, 115) (-80, 110) (-79, 156) (-78, 139) (-77, 173) (-76, 188) (-75, 202) (-74, 217) (-73, 253) (-72, 313) (-71, 306) (-70, 370) (-69, 381) (-68, 400) (-67, 456) (-66, 459) (-65, 547) (-64, 682) (-63, 672) (-62, 708) (-61, 844) (-60, 933) (-59, 1084) (-58, 1162) (-57, 1319) (-56, 1418) (-55, 1561) (-54, 1668) (-53, 1907) (-52, 2029) (-51, 2328) (-50, 2530) (-49, 2791) (-48, 3137) (-47, 3488) (-46, 3789) (-45, 4135) (-44, 4561) (-43, 5050) (-42, 5734) (-41, 6237) (-40, 6775) (-39, 7630) (-38, 8354) (-37, 8876) (-36, 10130) (-35, 11065) (-34, 12142) (-33, 13058) (-32, 14156) (-31, 15412) (-30, 16823) (-29, 18064) (-28, 19713) (-27, 20814) (-26, 21869) (-25, 22884) (-24, 23557) (-23, 24104) (-22, 24147) (-21, 23498) (-20, 22283) (-19, 20675) (-18, 18343) (-17, 15364) (-16, 12232) (-15, 9129) (-14, 6015) (-13, 3643) (-12, 1982) (-11, 887) (-10, 303) (-9, 102) (-8, 20) (-7, 6)
(1 row)

EXPLAIN (COSTS OFF) SELECT ddsketch(v, 0.05, 1024) FROM src_data;
                   QUERY PLAN                    
-------------------------------------------------
 Finalize Aggregate
   ->  Gather
         Workers Planned: 2
         ->  Partial Aggregate
               ->  Parallel Seq Scan on src_data
(5 rows)

SELECT ddsketch_percentile(v, 0.05, 1024, 0.9) FROM src_data;
 ddsketch_percentile 
---------------------
 0.12835409521811578
(1 row)

EXPLAIN (COSTS OFF) SELECT ddsketch(v, 0.05, 1024) FROM src_data;
                   QUERY PLAN                    
-------------------------------------------------
 Finalize Aggregate
   ->  Gather
         Workers Planned: 2
         ->  Partial Aggregate
               ->  Parallel Seq Scan on src_data
(5 rows)

SELECT ddsketch_percentile_of(v, 0.05, 1024, 0.9) FROM src_data;
 ddsketch_percentile_of 
------------------------
         1.000001000001
(1 row)

-- without  parallelism
SET max_parallel_workers_per_gather = 0;
EXPLAIN (COSTS OFF) SELECT ddsketch(v, 0.05, 1024) FROM src_data;
         QUERY PLAN         
----------------------------
 Aggregate
   ->  Seq Scan on src_data
(2 rows)

SELECT ddsketch(v, 0.05, 1024) FROM src_data;
ddsketch

 flags 0 count 1000000 alpha 0.050000 zero_count 0 maxbuckets 1024 buckets 249 125 (-7, 4) (-8, 32) (-9, 103) (-10, 327) (-11, 858) (-12, 1895) (-13, 3717) (-14, 6001) (-15, 8980) (-16, 12259) (-17, 15536) (-18, 18296) (-19, 20888) (-20, 22578) (-21, 23517) (-22, 24164) (-23, 24090) (-24, 23714) (-25, 23172) (-26, 21885) (-27, 20676) (-28, 19489) (-29, 17961) (-30, 16851) (-31, 15550) (-32, 14398) (-33, 13281) (-34, 11984) (-35, 10907) (-36, 10090) (-37, 8955) (-38, 8235) (-39, 7472) (-40, 6939) (-41, 6219) (-42, 5639) (-43, 5174) (-44, 4553) (-45, 4287) (-46, 3727) (-47, 3435) (-48, 3141) (-49, 2831) (-50, 2455) (-51, 2224) (-52, 2085) (-53, 1846) (-54, 1691) (-55, 1573) (-56, 1376) (-57, 1257) (-58, 1136) (-59, 1025) (-60, 876) (-61, 875) (-62, 789) (-63, 672) (-64, 620) (-65, 577) (-66, 530) (-67, 475) (-68, 448) (-69, 395) (-70, 360) (-71, 312) (-72, 274) (-73, 251) (-74, 228) (-75, 197) (-76, 182) (-77, 165) (-78, 167) (-79, 152) (-80, 104) (-81, 133) (-82, 99) (-83, 92) (-84, 79) (-85, 83) (-86, 61) (-87, 53) (-88, 70) (-89, 44) (-90, 56) (-91, 41) (-92, 36) (-93, 39) (-94, 25) (-95, 23) (-96, 18) (-97, 18) (-98, 21) (-99, 21) (-100, 20) (-101, 14) (-102, 10) (-103, 17) (-104, 14) (-105, 8) (-106, 8) (-107, 10) (-108, 10) (-109, 6) (-110, 6) (-111, 10) (-112, 2) (-113, 5) (-114, 3) (-115, 5) (-116, 5) (-117, 9) (-118, 1) (-119, 2) (-120, 2) (-121, 4) (-122, 2) (-123, 2) (-124, 1) (-125, 1) (-126, 1) (-129, 1) (-136, 1) (-139, 1) (-144, 1) (-145, 1) (-147, 1) (-140, 1) (-132, 1) (-131, 1) (-129, 1) (-128, 2) (-126, 1) (-124, 2) (-123, 3) (-122, 5) (-120, 4) (-119, 2) (-118, 6) (-117, 5) (-116, 7) (-115, 8) (-114, 2) (-113, 5) (-112, 4) (-111, 2) (-110, 7) (-109, 6) (-108, 8) (-107, 7) (-106, 7) (-105, 8) (-104, 20) (-103, 6) (-102, 10) (-101, 15) (-100, 14) (-99, 20) (-98, 16) (-97, 18) (-96, 26) (-95, 26) (-94, 28) (-93, 34) (-92, 39) (-91, 31) (-90, 37) (-89, 49) (-88, 62) (-87, 66) (-86, 86) (-85, 82) (-84, 92) (-83, 83) (-82, 105) (-81, 115) (-80, 110) (-79, 156) (-78, 139) (-77, 173) (-76, 188) (-75, 202) (-74, 217) (-73, 253) (-72, 313) (-71, 306) (-70, 370) (-69, 381) (-68, 400) (-67, 456) (-66, 459) (-65, 547) (-64, 682) (-63, 672) (-62, 708) (-61, 844) (-60, 933) (-59, 1084) (-58, 1162) (-57, 1319) (-56, 1418) (-55, 1561) (-54, 1668) (-53, 1907) (-52, 2029) (-51, 2328) (-50, 2530) (-49, 2791) (-48, 3137) (-47, 3488) (-46, 3789) (-45, 4135) (-44, 4561) (-43, 5050) (-42, 5734) (-41, 6237) (-40, 6775) (-39, 7630) (-38, 8354) (-37, 8876) (-36, 10130) (-35, 11065) (-34, 12142) (-33, 13058) (-32, 14156) (-31, 15412) (-30, 16823) (-29, 18064) (-28, 19713) (-27, 20814) (-26, 21869) (-25, 22884) (-24, 23557) (-23, 24104) (-22, 24147) (-21, 23498) (-20, 22283) (-19, 20675) (-18, 18343) (-17, 15364) (-16, 12232) (-15, 9129) (-14, 6015) (-13, 3643) (-12, 1982) (-11, 887) (-10, 303) (-9, 102) (-8, 20) (-7, 6)
(1 row)

-- NULL handling
-- individual values, individual percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text))
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
    p,
    (SELECT ddsketch_percentile(data.v, 0.01, 1024, p) FROM data) AS a,
    (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data) AS b
  FROM
    unnest((SELECT p FROM perc)) p
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- <value,count> API, individual percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)),
  data_exp AS (SELECT data.* FROM data, lateral generate_series(1, data.c))
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
    p,
    (SELECT ddsketch_percentile(data.v, data.c, 0.01, 1024, p) FROM data) AS a,
    (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data_exp) AS b
  FROM
    unnest((SELECT p FROM perc)) p
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- <value,count> API, but count is NULL (should be treated as 1), individual percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text))
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
    p,
    (SELECT ddsketch_percentile(data.v, NULL, 0.01, 1024, p) FROM data) AS a,
    (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data) AS b
  FROM
    unnest((SELECT p FROM perc)) p
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- individual values, array of percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text))
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
  SELECT
    unnest((SELECT p FROM perc)) p,
    unnest((SELECT ddsketch_percentile(data.v, 0.01, 1024, perc.p) FROM data, perc)) AS a,
    unnest((SELECT array_agg((SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data)) FROM perc)) AS b
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- <value,count> API, array of percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)),
  data_exp AS (SELECT data.* FROM data, lateral generate_series(1, data.c))
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
  SELECT
    unnest((SELECT p FROM perc)) p,
    unnest((SELECT ddsketch_percentile(data.v, data.c, 0.01, 1024, perc.p) FROM data, perc)) AS a,
    unnest((SELECT array_agg((SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data_exp)) FROM perc)) AS b
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- <value,count> API, but count is NULL (should be treated as 1), array of percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text))
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
  SELECT
    unnest((SELECT p FROM perc)) p,
    unnest((SELECT ddsketch_percentile(data.v, NULL, 0.01, 1024, perc.p) FROM data, perc)) AS a,
    unnest((SELECT array_agg((SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data)) FROM perc)) AS b
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- NULL handling, but this time make sure the first value is NULL
-- individual values, individual percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT NULL AS v, 1 AS c UNION ALL SELECT * FROM (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)) foo)
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
    p,
    (SELECT ddsketch_percentile(data.v, 0.01, 1024, p) FROM data) AS a,
    (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data) AS b
  FROM
    unnest((SELECT p FROM perc)) p
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- <value,count> API, individual percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT NULL AS v, 1 AS c UNION ALL SELECT * FROM (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)) foo),
  data_exp AS (SELECT data.* FROM data, lateral generate_series(1, data.c))
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
    p,
    (SELECT ddsketch_percentile(data.v, data.c, 0.01, 1024, p) FROM data) AS a,
    (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data_exp) AS b
  FROM
    unnest((SELECT p FROM perc)) p
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- <value,count> API, but count is NULL (should be treated as 1), individual percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT NULL AS v, 1 AS c UNION ALL SELECT * FROM (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)) foo)
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.05) AS check_error,
    print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
    p,
    (SELECT ddsketch_percentile(data.v, NULL, 0.01, 1024, p) FROM data) AS a,
    (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data) AS b
  FROM
    unnest((SELECT p FROM perc)) p
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- individual values, array of percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT NULL AS v, 1 AS c UNION ALL SELECT * FROM (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)) foo)
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
  SELECT
    unnest((SELECT p FROM perc)) p,
    unnest((SELECT ddsketch_percentile(data.v, 0.01, 1024, perc.p) FROM data, perc)) AS a,
    unnest((SELECT array_agg((SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data)) FROM perc)) AS b
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- <value,count> API, array of percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT NULL AS v, 1 AS c UNION ALL SELECT * FROM (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)) foo),
  data_exp AS (SELECT data.* FROM data, lateral generate_series(1, data.c))
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
  SELECT
    unnest((SELECT p FROM perc)) p,
    unnest((SELECT ddsketch_percentile(data.v, data.c, 0.01, 1024, perc.p) FROM data, perc)) AS a,
    unnest((SELECT array_agg((SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data_exp)) FROM perc)) AS b
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- <value,count> API, but count is NULL (should be treated as 1), array of percentiles
WITH
  perc AS (SELECT array_agg(i/10.0) AS p FROM generate_series(0,10) AS s(i)),
  data AS (SELECT NULL AS v, 1 AS c UNION ALL SELECT * FROM (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)) foo)
SELECT
    round(p,2) AS p,
    check_relative_error(a, b, 0.01) AS check_error,
    print_relative_error(a, b, 0.01) AS error_info
FROM (
  SELECT
    unnest((SELECT p FROM perc)) p,
    unnest((SELECT ddsketch_percentile(data.v, NULL, 0.01, 1024, perc.p) FROM data, perc)) AS a,
    unnest((SELECT array_agg((SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data)) FROM perc)) AS b
) foo;
  p   | check_error | error_info 
------+-------------+------------
 0.00 | t           | 
 0.10 | t           | 
 0.20 | t           | 
 0.30 | t           | 
 0.40 | t           | 
 0.50 | t           | 
 0.60 | t           | 
 0.70 | t           | 
 0.80 | t           | 
 0.90 | t           | 
 1.00 | t           | 
(11 rows)

-- percentile-of values
-- individual values
WITH
    vals AS (SELECT (i*10.0) AS f FROM generate_series(-10,10) s(i)),
    data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text))
SELECT
    f,
    abs(a - b) < 0.05
FROM (
    SELECT
       f,
       (SELECT ddsketch_percentile_of(data.v, 0.01, 1024, f) FROM data) AS a,
       (SELECT percent_rank(f) WITHIN GROUP (ORDER BY v) FROM data WHERE data.v IS NOT NULL) AS b
    FROM vals
) foo;
   f    | ?column? 
--------+----------
 -100.0 | t
  -90.0 | t
  -80.0 | t
  -70.0 | t
  -60.0 | t
  -50.0 | t
  -40.0 | t
  -30.0 | t
  -20.0 | t
  -10.0 | t
    0.0 | t
   10.0 | t
   20.0 | t
   30.0 | t
   40.0 | t
   50.0 | t
   60.0 | t
   70.0 | t
   80.0 | t
   90.0 | t
  100.0 | t
(21 rows)

WITH
    vals AS (SELECT (i*10.0) AS f FROM generate_series(-10,10) s(i)),
    data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)),
    data_exp AS (SELECT data.* FROM data, lateral generate_series(1, data.c))
SELECT
    f,
    abs(a - b) < 0.05
FROM (
    SELECT
       f,
       (SELECT ddsketch_percentile_of(data.v, data.c, 0.01, 1024, f) FROM data) AS a,
       (SELECT percent_rank(f) WITHIN GROUP (ORDER BY v) FROM data_exp WHERE data_exp.v IS NOT NULL) AS b
    FROM vals
) foo;
   f    | ?column? 
--------+----------
 -100.0 | t
  -90.0 | t
  -80.0 | t
  -70.0 | t
  -60.0 | t
  -50.0 | t
  -40.0 | t
  -30.0 | t
  -20.0 | t
  -10.0 | t
    0.0 | t
   10.0 | t
   20.0 | t
   30.0 | t
   40.0 | t
   50.0 | t
   60.0 | t
   70.0 | t
   80.0 | t
   90.0 | t
  100.0 | t
(21 rows)

WITH
    vals AS (SELECT (i*10.0) AS f FROM generate_series(-10,10) s(i)),
    data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text))
SELECT
    f,
    abs(a - b) < 0.05
FROM (
    SELECT
       f,
       (SELECT ddsketch_percentile_of(data.v, NULL, 0.01, 1024, f) FROM data) AS a,
       (SELECT percent_rank(f) WITHIN GROUP (ORDER BY v) FROM data WHERE data.v IS NOT NULL) AS b
    FROM vals
) foo;
   f    | ?column? 
--------+----------
 -100.0 | t
  -90.0 | t
  -80.0 | t
  -70.0 | t
  -60.0 | t
  -50.0 | t
  -40.0 | t
  -30.0 | t
  -20.0 | t
  -10.0 | t
    0.0 | t
   10.0 | t
   20.0 | t
   30.0 | t
   40.0 | t
   50.0 | t
   60.0 | t
   70.0 | t
   80.0 | t
   90.0 | t
  100.0 | t
(21 rows)

-- array of values
WITH data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)),
     vals AS (SELECT array_agg(i) AS v FROM generate_series(-100,100,10) AS s(i)),
     sketch AS (SELECT ddsketch_percentile_of(data.v, data.c, 0.01, 1024, vals.v) s FROM data, vals),
     ranks AS (SELECT array_agg((SELECT percent_rank(vals) WITHIN GROUP (ORDER BY data.v) FROM data WHERE data.v IS NOT NULL)) AS r FROM unnest((SELECT v FROM vals)) vals)
SELECT
    v,
    abs(a - b) < 0.05
FROM (
  SELECT
    unnest(vals.v) AS v,
    unnest(sketch.s) AS a,
    unnest(ranks.r) AS b
  FROM vals, sketch, ranks
) foo;
  v   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

WITH data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)),
     data_exp AS (SELECT data.* FROM data, lateral generate_series(1, data.c)),
     vals AS (SELECT array_agg(i) AS v FROM generate_series(-100,100,10) AS s(i)),
     sketch AS (SELECT ddsketch_percentile_of(data.v, data.c, 0.01, 1024, vals.v) s FROM data, vals),
     ranks AS (SELECT array_agg((SELECT percent_rank(vals) WITHIN GROUP (ORDER BY data_exp.v) FROM data_exp WHERE data_exp.v IS NOT NULL)) AS r FROM unnest((SELECT v FROM vals)) vals)
SELECT
    v,
    abs(a - b) < 0.05
FROM (
  SELECT
    unnest(vals.v) AS v,
    unnest(sketch.s) AS a,
    unnest(ranks.r) AS b
  FROM vals, sketch, ranks
) foo;
  v   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

WITH data AS (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)),
     vals AS (SELECT array_agg(i) AS v FROM generate_series(-100,100,10) AS s(i)),
     sketch AS (SELECT ddsketch_percentile_of(data.v, NULL, 0.01, 1024, vals.v) s FROM data, vals),
     ranks AS (SELECT array_agg((SELECT percent_rank(vals) WITHIN GROUP (ORDER BY data.v) FROM data WHERE data.v IS NOT NULL)) AS r FROM unnest((SELECT v FROM vals)) vals)
SELECT
    v,
    abs(a - b) < 0.05
FROM (
  SELECT
    unnest(vals.v) AS v,
    unnest(sketch.s) AS a,
    unnest(ranks.r) AS b
  FROM vals, sketch, ranks
) foo;
  v   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

-- NULL at the beginning of the data
WITH data AS (SELECT NULL AS v, 1 AS c UNION ALL SELECT * FROM (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)) foo),
     vals AS (SELECT array_agg(i) AS v FROM generate_series(-100,100,10) AS s(i)),
     sketch AS (SELECT ddsketch_percentile_of(data.v, data.c, 0.01, 1024, vals.v) s FROM data, vals),
     ranks AS (SELECT array_agg((SELECT percent_rank(vals) WITHIN GROUP (ORDER BY data.v) FROM data WHERE data.v IS NOT NULL)) AS r FROM unnest((SELECT v FROM vals)) vals)
SELECT
    v,
    abs(a - b) < 0.05
FROM (
  SELECT
    unnest(vals.v) AS v,
    unnest(sketch.s) AS a,
    unnest(ranks.r) AS b
  FROM vals, sketch, ranks
) foo;
  v   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

WITH data AS (SELECT NULL AS v, 1 AS c UNION ALL SELECT * FROM (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)) foo),
     data_exp AS (SELECT data.* FROM data, lateral generate_series(1, data.c)),
     vals AS (SELECT array_agg(i) AS v FROM generate_series(-100,100,10) AS s(i)),
     sketch AS (SELECT ddsketch_percentile_of(data.v, data.c, 0.01, 1024, vals.v) s FROM data, vals),
     ranks AS (SELECT array_agg((SELECT percent_rank(vals) WITHIN GROUP (ORDER BY data_exp.v) FROM data_exp WHERE data_exp.v IS NOT NULL)) AS r FROM unnest((SELECT v FROM vals)) vals)
SELECT
    v,
    abs(a - b) < 0.05
FROM (
  SELECT
    unnest(vals.v) AS v,
    unnest(sketch.s) AS a,
    unnest(ranks.r) AS b
  FROM vals, sketch, ranks
) foo;
  v   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

WITH data AS (SELECT NULL AS v, 1 AS c UNION ALL SELECT * FROM (SELECT (CASE WHEN mod(i,2) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v, 1 + mod(i,5) c FROM generate_series(1,10000) s(i) ORDER BY md5(i::text)) foo),
     vals AS (SELECT array_agg(i) AS v FROM generate_series(-100,100,10) AS s(i)),
     sketch AS (SELECT ddsketch_percentile_of(data.v, NULL, 0.01, 1024, vals.v) s FROM data, vals),
     ranks AS (SELECT array_agg((SELECT percent_rank(vals) WITHIN GROUP (ORDER BY data.v) FROM data WHERE data.v IS NOT NULL)) AS r FROM unnest((SELECT v FROM vals)) vals)
SELECT
    v,
    abs(a - b) < 0.05
FROM (
  SELECT
    unnest(vals.v) AS v,
    unnest(sketch.s) AS a,
    unnest(ranks.r) AS b
  FROM vals, sketch, ranks
) foo;
  v   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

-- sketches
WITH data AS (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)),
     sketches AS (SELECT ddsketch(data.v, 0.05, 1024) AS d FROM data GROUP BY c),
     perc AS (SELECT array_agg(i / 100.0) AS p FROM generate_series(0,100,10) s(i))
SELECT
  round(p, 2),
  check_relative_error(a, b, 0.05) AS check_error,
  print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile(sketches.d, p) FROM sketches) AS a,
     (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data) AS b
  FROM unnest((SELECT p FROM perc)) p) foo;
 round | check_error | error_info 
-------+-------------+------------
  0.00 | t           | 
  0.10 | t           | 
  0.20 | t           | 
  0.30 | t           | 
  0.40 | t           | 
  0.50 | t           | 
  0.60 | t           | 
  0.70 | t           | 
  0.80 | t           | 
  0.90 | t           | 
  1.00 | t           | 
(11 rows)

WITH data AS (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)),
     data_exp AS (SELECT data.* FROM data, lateral generate_series(1, data.c)),
     sketches AS (SELECT ddsketch(data.v, data.c, 0.05, 1024) AS d FROM data GROUP BY c),
     perc AS (SELECT array_agg(i / 100.0) AS p FROM generate_series(0,100,10) s(i))
SELECT
  round(p, 2),
  check_relative_error(a, b, 0.05) AS check_error,
  print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile(sketches.d, p) FROM sketches) AS a,
     (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data_exp) AS b
  FROM unnest((SELECT p FROM perc)) p) foo;
 round | check_error | error_info 
-------+-------------+------------
  0.00 | t           | 
  0.10 | t           | 
  0.20 | t           | 
  0.30 | t           | 
  0.40 | t           | 
  0.50 | t           | 
  0.60 | t           | 
  0.70 | t           | 
  0.80 | t           | 
  0.90 | t           | 
  1.00 | t           | 
(11 rows)

-- NULL is equal to count=1
WITH data AS (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)),
     sketches AS (SELECT ddsketch(data.v, NULL, 0.05, 1024) AS d FROM data GROUP BY c),
     perc AS (SELECT array_agg(i / 100.0) AS p FROM generate_series(0,100,10) s(i))
SELECT
  round(p, 2),
  check_relative_error(a, b, 0.05) AS check_error,
  print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile(sketches.d, p) FROM sketches) AS a,
     (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data) AS b
  FROM unnest((SELECT p FROM perc)) p) foo;
 round | check_error | error_info 
-------+-------------+------------
  0.00 | t           | 
  0.10 | t           | 
  0.20 | t           | 
  0.30 | t           | 
  0.40 | t           | 
  0.50 | t           | 
  0.60 | t           | 
  0.70 | t           | 
  0.80 | t           | 
  0.90 | t           | 
  1.00 | t           | 
(11 rows)

-- percentile_of
WITH data AS (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)),
     sketches AS (SELECT ddsketch(data.v, 0.05, 1024) AS d FROM data GROUP BY c),
     vals AS (SELECT array_agg(i) AS p FROM generate_series(-100,100,10) s(i))
SELECT
  p,
  abs(a - b) < 0.05
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile_of(sketches.d, p) FROM sketches) AS a,
     (SELECT percent_rank(p) WITHIN GROUP (ORDER BY v) FROM data WHERE data.v IS NOT NULL) AS b
  FROM unnest((SELECT p FROM vals)) p) foo;
  p   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

WITH data AS (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)),
     data_exp AS (SELECT data.* FROM data, lateral generate_series(1, data.c)),
     sketches AS (SELECT ddsketch(data.v, data.c, 0.05, 1024) AS d FROM data GROUP BY c),
     vals AS (SELECT array_agg(i) AS p FROM generate_series(-100,100,10) s(i))
SELECT
  p,
  abs(a - b) < 0.05
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile_of(sketches.d, p) FROM sketches) AS a,
     (SELECT percent_rank(p) WITHIN GROUP (ORDER BY v) FROM data_exp WHERE data_exp.v IS NOT NULL) AS b
  FROM unnest((SELECT p FROM vals)) p) foo;
  p   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

WITH data AS (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)),
     sketches AS (SELECT ddsketch(data.v, 0.05, 1024) AS d FROM data GROUP BY c),
     vals AS (SELECT array_agg(i) AS p FROM generate_series(-100,100,10) s(i))
SELECT
  p,
  abs(a - b) < 0.05
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile_of(sketches.d, p) FROM sketches) AS a,
     (SELECT percent_rank(p) WITHIN GROUP (ORDER BY v) FROM data WHERE data.v IS NOT NULL) AS b
  FROM unnest((SELECT p FROM vals)) p) foo;
  p   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

-- sketches (first value is NULL)
WITH data AS (SELECT 1 AS c, NULL AS v UNION ALL SELECT * FROM (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)) foo),
     sketches AS (SELECT ddsketch(data.v, 0.05, 1024) AS d FROM data GROUP BY c),
     perc AS (SELECT array_agg(i / 100.0) AS p FROM generate_series(0,100,10) s(i))
SELECT
  round(p, 2),
  check_relative_error(a, b, 0.05) AS check_error,
  print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile(sketches.d, p) FROM sketches) AS a,
     (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data) AS b
  FROM unnest((SELECT p FROM perc)) p) foo;
 round | check_error | error_info 
-------+-------------+------------
  0.00 | t           | 
  0.10 | t           | 
  0.20 | t           | 
  0.30 | t           | 
  0.40 | t           | 
  0.50 | t           | 
  0.60 | t           | 
  0.70 | t           | 
  0.80 | t           | 
  0.90 | t           | 
  1.00 | t           | 
(11 rows)

WITH data AS (SELECT 1 AS c, NULL AS v UNION ALL SELECT * FROM (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)) foo),
     data_exp AS (SELECT data.* FROM data, lateral generate_series(1, data.c)),
     sketches AS (SELECT ddsketch(data.v, data.c, 0.05, 1024) AS d FROM data GROUP BY c),
     perc AS (SELECT array_agg(i / 100.0) AS p FROM generate_series(0,100,10) s(i))
SELECT
  round(p, 2),
  check_relative_error(a, b, 0.05) AS check_error,
  print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile(sketches.d, p) FROM sketches) AS a,
     (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data_exp) AS b
  FROM unnest((SELECT p FROM perc)) p) foo;
 round | check_error | error_info 
-------+-------------+------------
  0.00 | t           | 
  0.10 | t           | 
  0.20 | t           | 
  0.30 | t           | 
  0.40 | t           | 
  0.50 | t           | 
  0.60 | t           | 
  0.70 | t           | 
  0.80 | t           | 
  0.90 | t           | 
  1.00 | t           | 
(11 rows)

WITH data AS (SELECT 1 AS c, NULL AS v UNION ALL SELECT * FROM (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)) foo),
     sketches AS (SELECT ddsketch(data.v, NULL, 0.05, 1024) AS d FROM data GROUP BY c),
     perc AS (SELECT array_agg(i / 100.0) AS p FROM generate_series(0,100,10) s(i))
SELECT
  round(p, 2),
  check_relative_error(a, b, 0.05) AS check_error,
  print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile(sketches.d, p) FROM sketches) AS a,
     (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data) AS b
  FROM unnest((SELECT p FROM perc)) p) foo;
 round | check_error | error_info 
-------+-------------+------------
  0.00 | t           | 
  0.10 | t           | 
  0.20 | t           | 
  0.30 | t           | 
  0.40 | t           | 
  0.50 | t           | 
  0.60 | t           | 
  0.70 | t           | 
  0.80 | t           | 
  0.90 | t           | 
  1.00 | t           | 
(11 rows)

-- NULL is equal to count=1
WITH data AS (SELECT 1 AS c, NULL AS v UNION ALL SELECT * FROM (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)) foo),
     sketches AS (SELECT ddsketch(data.v, NULL, 0.05, 1024) AS d FROM data GROUP BY c),
     perc AS (SELECT array_agg(i / 100.0) AS p FROM generate_series(0,100,10) s(i))
SELECT
  round(p, 2),
  check_relative_error(a, b, 0.05) AS check_error,
  print_relative_error(a, b, 0.05) AS error_info
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile(sketches.d, p) FROM sketches) AS a,
     (SELECT percentile_disc(p) WITHIN GROUP (ORDER BY v) FROM data) AS b
  FROM unnest((SELECT p FROM perc)) p) foo;
 round | check_error | error_info 
-------+-------------+------------
  0.00 | t           | 
  0.10 | t           | 
  0.20 | t           | 
  0.30 | t           | 
  0.40 | t           | 
  0.50 | t           | 
  0.60 | t           | 
  0.70 | t           | 
  0.80 | t           | 
  0.90 | t           | 
  1.00 | t           | 
(11 rows)

-- percentile_of
WITH data AS (SELECT 1 AS c, NULL AS v UNION ALL SELECT * FROM (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)) foo),
     sketches AS (SELECT ddsketch(data.v, 0.05, 1024) AS d FROM data GROUP BY c),
     vals AS (SELECT array_agg(i) AS p FROM generate_series(-100,100,10) s(i))
SELECT
  p,
  abs(a - b) < 0.05
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile_of(sketches.d, p) FROM sketches) AS a,
     (SELECT percent_rank(p) WITHIN GROUP (ORDER BY v) FROM data WHERE data.v IS NOT NULL) AS b
  FROM unnest((SELECT p FROM vals)) p) foo;
  p   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

WITH data AS (SELECT 1 AS c, NULL AS v UNION ALL SELECT * FROM (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)) foo),
     data_exp AS (SELECT data.* FROM data, lateral generate_series(1, data.c)),
     sketches AS (SELECT ddsketch(data.v, data.c, 0.05, 1024) AS d FROM data GROUP BY c),
     vals AS (SELECT array_agg(i) AS p FROM generate_series(-100,100,10) s(i))
SELECT
  p,
  abs(a - b) < 0.05
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile_of(sketches.d, p) FROM sketches) AS a,
     (SELECT percent_rank(p) WITHIN GROUP (ORDER BY v) FROM data_exp WHERE data_exp.v IS NOT NULL) AS b
  FROM unnest((SELECT p FROM vals)) p) foo;
  p   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

WITH data AS (SELECT 1 AS c, NULL AS v UNION ALL SELECT * FROM (SELECT mod(i,10) AS c, (CASE WHEN mod(i,5) = 0 THEN NULL ELSE (i / 50.0 - 100.0) END) AS v FROM generate_series(1,10000) s(i)) foo),
     sketches AS (SELECT ddsketch(data.v, 0.05, 1024) AS d FROM data GROUP BY c),
     vals AS (SELECT array_agg(i) AS p FROM generate_series(-100,100,10) s(i))
SELECT
  p,
  abs(a - b) < 0.05
FROM (
  SELECT
     p,
     (SELECT ddsketch_percentile_of(sketches.d, p) FROM sketches) AS a,
     (SELECT percent_rank(p) WITHIN GROUP (ORDER BY v) FROM data WHERE data.v IS NOT NULL) AS b
  FROM unnest((SELECT p FROM vals)) p) foo;
  p   | ?column? 
------+----------
 -100 | t
  -90 | t
  -80 | t
  -70 | t
  -60 | t
  -50 | t
  -40 | t
  -30 | t
  -20 | t
  -10 | t
    0 | t
   10 | t
   20 | t
   30 | t
   40 | t
   50 | t
   60 | t
   70 | t
   80 | t
   90 | t
  100 | t
(21 rows)

SELECT ddsketch_percentile(NULL::ddsketch, 0.9);
 ddsketch_percentile 
---------------------
                    
(1 row)

SELECT ddsketch_percentile(NULL::ddsketch, ARRAY[0.5, 0.9]);
 ddsketch_percentile 
---------------------
 
(1 row)

SELECT ddsketch_percentile_of(NULL::ddsketch, 0.9);
 ddsketch_percentile_of 
------------------------
                       
(1 row)

SELECT ddsketch_percentile_of(NULL::ddsketch, ARRAY[0.1, 0.9]);
 ddsketch_percentile_of 
------------------------
 
(1 row)

SELECT ddsketch(NULL::ddsketch) FROM generate_series(1,10);
 ddsketch 
----------
 
(1 row)

-- can't merge sketches with different alpha values
WITH sketches AS (
    SELECT ddsketch(i/100.0, 0.01, 1024) AS s FROM generate_series(1,10000) s(i)
    UNION ALL
    SELECT ddsketch(i/100.0, 0.05, 1024) AS s FROM generate_series(1,10000) s(i)
)
SELECT ddsketch(sketches.s) FROM sketches;
ERROR:  state and sketch are not compatible: alpha 0.010000 != 0.050000
WITH sketches AS (
    SELECT ddsketch(i/100.0, 0.01, 1024) AS s FROM generate_series(1,10000) s(i)
    UNION ALL
    SELECT ddsketch(i/100.0, 0.05, 1024) AS s FROM generate_series(1,10000) s(i)
)
SELECT ddsketch_percentile(sketches.s, 0.9) FROM sketches;
ERROR:  state and sketch are not compatible: alpha 0.010000 != 0.050000
WITH sketches AS (
    SELECT ddsketch(i/100.0, 0.01, 1024) AS s FROM generate_series(1,10000) s(i)
    UNION ALL
    SELECT ddsketch(i/100.0, 0.05, 1024) AS s FROM generate_series(1,10000) s(i)
)
SELECT ddsketch_percentile(sketches.s, ARRAY[0.95, 0.99]) FROM sketches;
ERROR:  state and sketch are not compatible: alpha 0.010000 != 0.050000
WITH sketches AS (
    SELECT ddsketch(i/100.0, 0.01, 1024) AS s FROM generate_series(1,10000) s(i)
    UNION ALL
    SELECT ddsketch(i/100.0, 0.05, 1024) AS s FROM generate_series(1,10000) s(i)
)
SELECT ddsketch_percentile_of(sketches.s, 95) FROM sketches;
ERROR:  state and sketch are not compatible: alpha 0.010000 != 0.050000
WITH sketches AS (
    SELECT ddsketch(i/100.0, 0.01, 1024) AS s FROM generate_series(1,10000) s(i)
    UNION ALL
    SELECT ddsketch(i/100.0, 0.05, 1024) AS s FROM generate_series(1,10000) s(i)
)
SELECT ddsketch_percentile_of(sketches.s, ARRAY[95, 99]) FROM sketches;
ERROR:  state and sketch are not compatible: alpha 0.010000 != 0.050000
WITH sketches AS (
    SELECT ddsketch(i/100.0, 0.01, 1024) AS s FROM generate_series(1,10000) s(i)
)
SELECT ddsketch_union(sketches.s, NULL::ddsketch) FROM sketches;
ddsketch_union

 flags 0 count 10000 alpha 0.010000 zero_count 0 maxbuckets 1024 buckets 315 0 (-230, 1) (-195, 1) (-175, 1) (-160, 1) (-149, 1) (-140, 1) (-132, 1) (-126, 1) (-120, 1) (-115, 1) (-110, 1) (-106, 1) (-102, 1) (-98, 1) (-94, 1) (-91, 1) (-88, 1) (-85, 1) (-83, 1) (-80, 1) (-78, 1) (-75, 1) (-73, 1) (-71, 1) (-69, 1) (-67, 1) (-65, 1) (-63, 1) (-61, 1) (-60, 1) (-58, 1) (-56, 1) (-55, 1) (-53, 1) (-52, 1) (-51, 1) (-49, 1) (-48, 1) (-47, 1) (-45, 1) (-44, 1) (-43, 1) (-42, 1) (-41, 1) (-39, 1) (-38, 1) (-37, 1) (-36, 1) (-35, 1) (-34, 1) (-33, 1) (-32, 1) (-31, 1) (-30, 1) (-29, 1) (-28, 2) (-27, 1) (-26, 1) (-25, 1) (-24, 1) (-23, 2) (-22, 1) (-21, 1) (-20, 2) (-19, 1) (-18, 1) (-17, 2) (-16, 1) (-15, 2) (-14, 1) (-13, 2) (-12, 1) (-11, 2) (-10, 1) (-9, 2) (-8, 2) (-7, 1) (-6, 2) (-5, 2) (-4, 2) (-3, 2) (-2, 2) (-1, 2) (0, 2) (1, 2) (2, 2) (3, 2) (4, 2) (5, 2) (6, 2) (7, 3) (8, 2) (9, 2) (10, 3) (11, 2) (12, 3) (13, 2) (14, 3) (15, 2) (16, 3) (17, 3) (18, 3) (19, 3) (20, 3) (21, 3) (22, 3) (23, 3) (24, 3) (25, 3) (26, 4) (27, 3) (28, 4) (29, 3) (30, 4) (31, 3) (32, 4) (33, 4) (34, 4) (35, 4) (36, 4) (37, 4) (38, 4) (39, 5) (40, 4) (41, 5) (42, 4) (43, 5) (44, 5) (45, 4) (46, 5) (47, 6) (48, 5) (49, 5) (50, 5) (51, 6) (52, 5) (53, 6) (54, 6) (55, 6) (56, 6) (57, 6) (58, 7) (59, 6) (60, 7) (61, 6) (62, 7) (63, 7) (64, 7) (65, 7) (66, 8) (67, 7) (68, 8) (69, 8) (70, 8) (71, 8) (72, 9) (73, 8) (74, 9) (75, 9) (76, 9) (77, 9) (78, 9) (79, 10) (80, 10) (81, 10) (82, 10) (83, 10) (84, 11) (85, 11) (86, 11) (87, 11) (88, 12) (89, 12) (90, 12) (91, 12) (92, 12) (93, 13) (94, 13) (95, 13) (96, 14) (97, 13) (98, 14) (99, 15) (100, 14) (101, 15) (102, 16) (103, 15) (104, 16) (105, 16) (106, 17) (107, 17) (108, 17) (109, 17) (110, 18) (111, 18) (112, 19) (113, 19) (114, 19) (115, 20) (116, 20) (117, 21) (118, 21) (119, 21) (120, 22) (121, 22) (122, 23) (123, 23) (124, 24) (125, 24) (126, 24) (127, 26) (128, 25) (129, 26) (130, 27) (131, 27) (132, 28) (133, 28) (134, 29) (135, 30) (136, 30) (137, 30) (138, 32) (139, 32) (140, 32) (141, 33) (142, 34) (143, 35) (144, 35) (145, 36) (146, 37) (147, 37) (148, 38) (149, 39) (150, 40) (151, 41) (152, 41) (153, 42) (154, 44) (155, 44) (156, 44) (157, 46) (158, 47) (159, 47) (160, 49) (161, 50) (162, 50) (163, 52) (164, 52) (165, 54) (166, 55) (167, 56) (168, 57) (169, 58) (170, 59) (171, 61) (172, 62) (173, 63) (174, 64) (175, 65) (176, 67) (177, 69) (178, 69) (179, 71) (180, 73) (181, 74) (182, 75) (183, 77) (184, 79) (185, 80) (186, 81) (187, 84) (188, 85) (189, 87) (190, 88) (191, 91) (192, 92) (193, 94) (194, 96) (195, 97) (196, 100) (197, 102) (198, 104) (199, 106) (200, 108) (201, 110) (202, 113) (203, 115) (204, 117) (205, 119) (206, 122) (207, 125) (208, 127) (209, 129) (210, 132) (211, 135) (212, 137) (213, 141) (214, 143) (215, 146) (216, 148) (217, 152) (218, 155) (219, 158) (220, 162) (221, 164) (222, 168) (223, 172) (224, 174) (225, 179) (226, 181) (227, 186) (228, 189) (229, 193) (230, 197) (231, 51)
(1 row)

WITH sketches AS (
    SELECT ddsketch(i/100.0, 0.05, 1024) AS s FROM generate_series(1,10000) s(i)
)
SELECT ddsketch_union(NULL::ddsketch, sketches.s) FROM sketches;
                                                                                                                                                                                                                                                                                                                                                                                                          ddsketch_union                                                                                                                                                                                                                                                                                                                                                                                                          

 flags 0 count 10000 alpha 0.050000 zero_count 0 maxbuckets 1024 buckets 80 0 (-46, 1) (-39, 1) (-35, 1) (-32, 1) (-29, 1) (-28, 1) (-26, 1) (-25, 1) (-24, 1) (-23, 1) (-22, 1) (-21, 1) (-20, 1) (-19, 1) (-18, 2) (-17, 2) (-16, 2) (-15, 2) (-14, 2) (-13, 3) (-12, 3) (-11, 3) (-10, 3) (-9, 4) (-8, 4) (-7, 5) (-6, 5) (-5, 6) (-4, 7) (-3, 7) (-2, 7) (-1, 9) (0, 10) (1, 10) (2, 12) (3, 13) (4, 14) (5, 15) (6, 18) (7, 19) (8, 21) (9, 24) (10, 26) (11, 28) (12, 32) (13, 35) (14, 38) (15, 43) (16, 47) (17, 53) (18, 57) (19, 64) (20, 71) (21, 78) (22, 86) (23, 95) (24, 105) (25, 116) (26, 129) (27, 142) (28, 157) (29, 173) (30, 192) (31, 212) (32, 234) (33, 259) (34, 286) (35, 317) (36, 349) (37, 387) (38, 427) (39, 472) (40, 522) (41, 576) (42, 638) (43, 704) (44, 779) (45, 860) (46, 951) (47, 14)
(1 row)

SELECT ddsketch_union(NULL::ddsketch, NULL::ddsketch);
 ddsketch_union 
----------------
 
(1 row)

-- test info functions
WITH data AS (SELECT 0.5 + i/10000.0 AS v FROM generate_series(1,10000) s(i)),
     sketch AS (SELECT ddsketch(v, 0.05, 128) s FROM data)
SELECT * FROM ddsketch_info((SELECT s FROM sketch));
 bytes | flags | alpha | count | zero_count | max_buckets | negative_buckets | positive_buckets |      min_indexable      |      max_indexable      
-------+-------+-------+-------+------------+-------------+------------------+------------------+-------------------------+-------------------------
   240 |     0 |  0.05 | 10000 |          0 |         128 |                0 |               12 | 2.4592921594026965e-308 | 1.6264842648754283e+308
(1 row)

WITH data AS (SELECT 0.5 + i/10000.0 AS v FROM generate_series(1,10000) s(i)),
     sketch AS (SELECT ddsketch(v, 0.05, 128) s FROM data)
SELECT * FROM ddsketch_buckets((SELECT s FROM sketch));
 index | bucket_index |    bucket_lower     |     bucket_upper     |    bucket_length     | bucket_count 
-------+--------------+---------------------+----------------------+----------------------+--------------
     0 |           -6 | -0.5485368867271029 | -0.49629527846737875 | 0.052241608259724126 |          485
     1 |           -5 |  0.5485368867271029 |   0.6062776116457452 |  0.05774072491864235 |          577
     2 |           -4 |  0.6062776116457452 |   0.6700963076084553 |  0.06381869596271006 |          638
     3 |           -3 |  0.6700963076084553 |   0.7406327610409242 |  0.07053645343246895 |          706
     4 |           -2 |  0.7406327610409242 |     0.81859410430839 |  0.07796134326746573 |          779
     5 |           -1 |    0.81859410430839 |   0.9047619047619048 |   0.0861678004535148 |          862
     6 |            0 |  0.9047619047619048 |                    1 |  0.09523809523809523 |          953
     7 |            1 |                   1 |    1.105263157894737 |  0.10526315789473695 |         1052
     8 |            2 |   1.105263157894737 |    1.221606648199446 |  0.11634349030470914 |         1164
     9 |            3 |   1.221606648199446 |   1.3501968216941245 |  0.12859017349467838 |         1285
    10 |            4 |  1.3501968216941245 |    1.492322802925085 |  0.14212598123096054 |         1422
    11 |            5 |   1.492322802925085 |   1.6494094137593045 |   0.1570866108342195 |           77
(12 rows)

SELECT * FROM ddsketch_info(0.05);
      min_indexable      |      max_indexable      
-------------------------+-------------------------
 2.4592921594026965e-308 | 1.6264842648754283e+308
(1 row)

SELECT * FROM ddsketch_buckets(0.05, 0.5, 5);
 index | bucket_index |     bucket_min      |     bucket_max     
-------+--------------+---------------------+--------------------
     0 |           -6 | 0.49629527846737875 | 0.5485368867271029
     1 |           -5 |  0.5485368867271029 | 0.6062776116457452
     2 |           -4 |  0.6062776116457452 | 0.6700963076084553
     3 |           -3 |  0.6700963076084553 | 0.7406327610409242
     4 |           -2 |  0.7406327610409242 |   0.81859410430839
     5 |           -1 |    0.81859410430839 | 0.9047619047619048
     6 |            0 |  0.9047619047619048 |                  1
     7 |            1 |                   1 |  1.105263157894737
     8 |            2 |   1.105263157894737 |  1.221606648199446
     9 |            3 |   1.221606648199446 | 1.3501968216941245
    10 |            4 |  1.3501968216941245 |  1.492322802925085
    11 |            5 |   1.492322802925085 | 1.6494094137593045
    12 |            6 |  1.6494094137593045 | 1.8230314573129156
    13 |            7 |  1.8230314573129156 | 2.0149295054511174
    14 |            8 |  2.0149295054511174 |  2.227027348130182
    15 |            9 |   2.227027348130182 | 2.4614512795123065
    16 |           10 |  2.4614512795123065 |  2.720551414197813
    17 |           11 |   2.720551414197813 |  3.006925247271267
    18 |           12 |   3.006925247271267 | 3.3234436943524526
    19 |           13 |  3.3234436943524526 | 3.6732798727053426
    20 |           14 |  3.6732798727053426 |  4.059940911937484
    21 |           15 |   4.059940911937484 |  4.487303113194061
    22 |           16 |   4.487303113194061 | 4.9596508093197516
    23 |           17 |  4.9596508093197516 |  5.481719315563936
(24 rows)

SELECT * FROM ddsketch_buckets(0.05, -5, -0.5);
 index | bucket_index |     bucket_min      |      bucket_max      
-------+--------------+---------------------+----------------------
     0 |           17 |  -5.481719315563936 |  -4.9596508093197516
     1 |           16 | -4.9596508093197516 |   -4.487303113194061
     2 |           15 |  -4.487303113194061 |   -4.059940911937484
     3 |           14 |  -4.059940911937484 |  -3.6732798727053426
     4 |           13 | -3.6732798727053426 |  -3.3234436943524526
     5 |           12 | -3.3234436943524526 |   -3.006925247271267
     6 |           11 |  -3.006925247271267 |   -2.720551414197813
     7 |           10 |  -2.720551414197813 |  -2.4614512795123065
     8 |            9 | -2.4614512795123065 |   -2.227027348130182
     9 |            8 |  -2.227027348130182 |  -2.0149295054511174
    10 |            7 | -2.0149295054511174 |  -1.8230314573129156
    11 |            6 | -1.8230314573129156 |  -1.6494094137593045
    12 |            5 | -1.6494094137593045 |   -1.492322802925085
    13 |            4 |  -1.492322802925085 |  -1.3501968216941245
    14 |            3 | -1.3501968216941245 |   -1.221606648199446
    15 |            2 |  -1.221606648199446 |   -1.105263157894737
    16 |            1 |  -1.105263157894737 |                   -1
    17 |            0 |                  -1 |  -0.9047619047619048
    18 |           -1 | -0.9047619047619048 |    -0.81859410430839
    19 |           -2 |   -0.81859410430839 |  -0.7406327610409242
    20 |           -3 | -0.7406327610409242 |  -0.6700963076084553
    21 |           -4 | -0.6700963076084553 |  -0.6062776116457452
    22 |           -5 | -0.6062776116457452 |  -0.5485368867271029
    23 |           -6 | -0.5485368867271029 | -0.49629527846737875
(24 rows)

